#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import subprocess
import sys
import re
import argparse


################################################################################
# Global part 
################################################################################

X    = 'xrandr'
EVALUATE = 'xrandr --query | grep " connected" | cut -d" " -f1'
AUTO = '--auto'
LINE_XRANDR_OUTPUT = 4
TITLE_XRANDR_OUTPUT = 2

XIN        = 'xinput'
PROPERTIES = 'set-prop'
XIN_OPTION = {"Synaptics Noise Cancellation" : ['20', '20'], 
              "Synaptics Finger"             : ['50', '90', '255']
             }

SPACE     = '    '
SPACEPLUS = '        + '

parser = argparse.ArgumentParser()
parser.add_argument('-c', '--config', default='home')
parser.add_argument('-w', '--wallpaper', default='manaan.png')
args = parser.parse_args()

config    = args.config
wallpaper = args.wallpaper


def display(monitors):
    print('Display : Arc-Pintade')
    print(SPACE+'config    : '+args.config)
    print(SPACE+'wallpaper : '+wallpaper)
    print(SPACE+'monitors  :')
    for m in monitors:
        print(SPACEPLUS+m.name+' '+m.resolution)
    print(SPACE+'xinputs   :')
    for key, o in XIN_OPTION.items():
        print(SPACEPLUS+key+' '+str(o))

################################################################################
# Xrandr part 
################################################################################


class Monitor:
    name       = None
    resolution = None

def offset(n):
    return TITLE_XRANDR_OUTPUT+(n*LINE_XRANDR_OUTPUT)

def extract_resolution(entry):
    pixels = re.split('/|x', entry)
    return str(pixels[0])+'x'+str(pixels[2])

def get_condition(monitor):
    if config=='cc':
        return ['--right-of', monitor.name]
    elif config=='home':
        return ['--left-of', monitor.name]

def get_monitors(output):
    n_monitors = int( (len(output) - TITLE_XRANDR_OUTPUT)/LINE_XRANDR_OUTPUT )
    list_monitors = []
    for n in range(n_monitors):
        mon = Monitor()
        mon.name = output[offset(n)+3]
        mon.resolution = extract_resolution( output[offset(n)+2])
        list_monitors.append(mon)
    return list_monitors

def add_screen(monitor):
    return ['--output', monitor.name, AUTO]


################################################################################
# Xinput part 
################################################################################


def test():
    pad_correction()

def get_xinput_id(prop):
    x_object = subprocess.run('xinput list | grep '+prop, shell=True, stdout=subprocess.PIPE)
    x_object_h = x_object.stdout.decode('utf-8').split()
    for l in x_object_h:
        if l.find('id=') != -1:
            return l[3:]

def pad_correction(prop='Touchpad'):
    foo = []
    for key, values in XIN_OPTION.items():
        foo.append([XIN,PROPERTIES,get_xinput_id(prop)]+[key]+values)
    return foo

################################################################################
# Wallpaper part 
################################################################################

def backwall(wallpaper, option='scale'):
    return 'feh --bg-'+option+' ~/.wallpapers/'+wallpaper

def refresh_wallpaper():
    return backwall(wallpaper)

################################################################################
# Main part 
################################################################################


if __name__ == '__main__':

    subprocess.run([X,AUTO])
    if config=='over':
        exit(0)

    evaluate = [X, '--listactivemonitors']
    xrandr_output =  subprocess.run(evaluate, stdout=subprocess.PIPE)
    xrandr_output_h = (xrandr_output.stdout.decode('utf-8')).split()
    
    monitors = get_monitors(xrandr_output_h)

    cmd = [X]
    if len(monitors) == 1:
        cmd += [AUTO] 
    if len(monitors) == 2:
        for m in monitors:
            cmd += add_screen(m)
        cmd += get_condition(monitors[0])
    

    cmd_pad_correction = pad_correction()


    try:
                
        subprocess.run(cmd)
        for pad in cmd_pad_correction:
            subprocess.run(pad)
        subprocess.run(refresh_wallpaper(), shell=True)

    except:
        print('Error with applied commands')
        exit(1)

    display(monitors)
